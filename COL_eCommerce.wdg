#To edit and compare internal_properties, use WINDEV integrated tools.
#Internal properties refer to the properties of controls in windows, reports, etc.
info :
 name : COL_eCommerce
 major_version : 28
 minor_version : 0
 type : 7
 description : ""
 subtype : 0
procedure_set :
 identifier : 0x16782fbc0089b21e
 internal_properties : CAAAAAgAAABGLu41kG7fjQV3iS4F72qmnKaNh5694reolNKIW0iw
 code_elements :
  internal_properties : CAAAAAgAAAAdC5DaGsntqmfkq1J4p6eipmeEO//QiIdypV0FB6KY+wiPKnW2KoJpaKmeXvb1NGpH4KGGthHXu/V4LqeilI4jnJwO5Q==
  type_code : 31
  p_codes :
   -
     internal_properties : CAAAAAgAAAChk6Tv47Sx1hHqh4gkL15fuQv+TLY3d5PxWNP+yAUJwXvuoMA92h3hson/NhSq8xwJ/Mj05qot0alYA/TJl2M/1h4vUkJv72Hzbd1rV1EFzXzGPwa7omFQgyNwCwhg4AvaRhrgn2FEBMrsHUY=
     code : |1+
      constant
      	// Types of payments (used in the Orders.PaymentType item)
      	PAYM_CC = 1				// Payment by bank card
      	PAYM_PAYPAL = 2			// Payment by PayPal
      	PAYM_WIRE = 3		// Payment by bank wire
      	PAYM_CHECK = 4			// Payment by check
      	
      	// States of an order (used in the Orders.OrderStatus item)
      	ORD_ESTIMATE = 5 					//Estimate
      	ORD_WAITINGFORPAYMENT = 1		// Order waiting for payment
      	ORD_PREPARATION = 2				// Order paid, currently prepared
      	ORD_DELIVERY = 3				// Order currently delivered
      	ORD_DELIVERED = 4					// Order delivered
      	
      	// Shipping modes of order (used in the Order.DeliveryMode item)
      	DELIV_NORMAL = 1
      	DELIV_ACK = 2
      	DELIV_CARRIER = 3
      	
      end
     type : 720896
  procedures :
   -
     name : OrderStatusToString
     procedure_id : 1619096949981060204
     type_code : 15
     code : |1-
      // Summary: Used to retrieve the order status in letters
      // Syntax:
      //[ <Result> = ] OrderStatusToString (<nOrderStatus>)
      //
      // Parameters:
      //	nOrderStatus: Status code of order
      // Return value:
      // 	ANSI string: Status of the order in plain letters
      
      Procédure OrderStatusToString(nOrderStatus)
      
      sStatus is string
      
      switch nOrderStatus
      
      	case ORD_ESTIMATE //Estimate
      		sStatus = "Estimate"
      	case ORD_WAITINGFORPAYMENT // Order waiting for payment
      		sStatus = "Waiting for payment"
      	case ORD_PREPARATION // Order paid, currently prepared
      		sStatus = "Currently prepared"
      	case ORD_DELIVERY // Order currently delivered
      		sStatus = "Delivery in progress"
      	case ORD_DELIVERED // Order delivered
      		sStatus = "Delivered"
      	other case
      		sStatus = "<Unknown>"		
      end
      
      
      result sStatus
     type : 458752
   -
     name : OrderPaymentToString
     internal_properties : CAAAAAgAAADoOcLgd1ngocVZtc5/eTt6Kj+5Z6i6c8GvbsdNTphosXnXJ54jVImNG4BDq6DZnXIIa8u4lZX2zsznM7H1LEfJ76+AuMQoGAxCuIgVmBuvNppqz/k8EQIGPA2FsC8K0ntYKE4KF4OzfV9l7sL73A==
     procedure_id : 1619097199089287018
     type_code : 15
     code : |1-
      // Summary: Used to retrieve the payment in letters from its value
      // Syntax:
      //[ <Result> = ] OrderPaymentToString (<nPaymentType>)
      //
      // Parameters:
      //	nPaymentType: Code of payment type
      // Return value:
      // 	ANSI string: Type of payment in plain letters
      
      Procédure OrderPaymentToString(nPaymentType)
      
      sPaymentType is string
      
      switch nPaymentType 
      	case PAYM_CC
      		sPaymentType = "CC"
      	case PAYM_CHECK
      		sPaymentType = "Check"
      	case PAYM_WIRE
      		sPaymentType = "Bank wire"
      	case PAYM_PAYPAL
      		sPaymentType = "Paypal"
      	other case
      		dbgAssert(False,"Unable to find the type of payment")
      		sPaymentType = "<Unknown>"				
      end
      
      
      result sPaymentType
     type : 458752
   -
     name : OrderDeliveryModeToString
     procedure_id : 1627958867678696518
     type_code : 15
     code : |1-
      // Summary: Used to retrieve the delivery mode in letters from its value
      // Syntax:
      //[ <Result> = ] OrderDeliveryModeToString (<nDeliveryMode>)
      //
      // Parameters:
      //	nDeliveryMode: Code of delivery mode
      // Return value:
      // 	ANSI string: Delivery mode in plain letters
      
      Procédure OrderDeliveryModeToString(nDeliveryMode)
      
      sDeliveryPaymentMode is string
      
      switch nDeliveryMode 
      	case DELIV_NORMAL
      		sDeliveryPaymentMode = "Normal"
      	case DELIV_ACK
      		sDeliveryPaymentMode = "Acknowledgment"
      	case DELIV_CARRIER
      		sDeliveryPaymentMode = "ShippingCompany"
      	other case
      		dbgAssert(False,"Unable to find the delivery mode")
      		sDeliveryPaymentMode = "<Unknown>"				
      end
      
      result sDeliveryPaymentMode
     type : 458752
   -
     name : OrderListStates
     procedure_id : 1627971632324209805
     type_code : 15
     code : |1-
      // Summary: Used to retrieve the possible states for an order
      // Syntax:
      //[ <Result> = ] OrderListStates ()
      //
      // Parameters:
      //	None
      // Return value:
      // 	ANSI string: List of possible states
      
      Procédure OrderListStates()
      
      sPossibleStates is string
      sPossibleStates = "Waiting for payment" + CR + "Currently prepared" + CR + "Delivery in progress" + CR + "Delivered" + CR + "Estimate"
      	
      result sPossibleStates
     type : 458752
   -
     name : OrderListDeliveryModes
     procedure_id : 1627973350311134989
     type_code : 15
     code : |1-
      // Summary: Used to retrieve the possible shipping modes for an order
      // Syntax:
      //[ <Result> = ] OrderListDeliveryModes ()
      //
      // Parameters:
      //	None
      // Return value:
      // 	ANSI string: List of possible delivery modes
      
      Procédure OrderListDeliveryModes()
      
      sPossibleDeliveryModes is string
      
      sPossibleDeliveryModes = "Normal" + CR + "Acknowledgment" + CR + "ShippingCompany"
      
      result sPossibleDeliveryModes
     type : 458752
   -
     name : OrderListPayments
     internal_properties : CAAAAAgAAAAmUcIUYYIXscjYV2GmJHu+eQYeSvaxPWY6nJTBsQqKm4zJazoJdBDpouoWGC5YqW6qkgbDFoiVszKO/YYcDpQhWRqIjAjIP85gaPLT2yBvFFW6KjxMAa5NK1hjQx7DU3q6Caoa0xTYEwcyze431+qXsPYM/Qs853xnLPt3/CyckeEDu3n61TwZx+RGzsPHshfF0GsCHbY=
     procedure_id : 1627977945926621682
     type_code : 15
     code : |1+
      // Summary: Used to retrieve the possible payment types for an order
      // Syntax:
      //[ <Result> = ] OrderListPayments ()
      //
      // Parameters:
      //	None
      // Return value:
      // 	ANSI string: List of possible payment types
      
      Procédure OrderListPayments()
      
      sPossiblePayments is string
      
      sPossiblePayments = "CC" + CR + "Check" + CR + "Bank wire" + CR + "Paypal"
      
      result sPossiblePayments
      
      
     type : 458752
   -
     name : OrderCreate
     internal_properties : CAAAAAgAAAAON/+fkdpAmZrPND5ekjVuiRYlwdXQDrWdiXDBpjB5M/xNWLO3rpgLPPta7khuIZymKwAp+Kou4l4nbYw5vC67L7HtcdrrpqbhUioPwfeyiqBMaKIUSvXQppDSG2ss92VvJPsgNOdqZsbxugBO2wpQ76UvyQOHFnnq9zMB1rE4bZPzGS84cjKxOp26Ajz4IeI=
     procedure_id : 1627988726294620044
     type_code : 15
     code : |1-
      // Summary: Creates a new order with a sequential number per day
      // Syntax:
      //[ <Result> = ] OrderCreate ()
      //
      // Parameters:
      //	None
      // Return value:
      // 	ANSI string: Order number
      
      Procédure OrderCreate(LOCAL dDate is date = DateSys)
      
      // The generated numbers have the following format:
      // OF01-YYYYMMDD-seqnum
      // OF01: order forms of the Web site
      // YYYYMMDD: creation date of order form
      // seqnum: sequential number of the OF
      
      // Try to position on today's record and to lock it
      while HReadSeekFirst(OrderNum,OrderDate,dDate,hLockWrite)=False
      	// If no record was found, add it
      	if HFound()=False then
      		OrderNum.OrderDate = dDate
      		OrderNum.Number = 0
      		HAdd(OrderNum)
      	else
      		// Record found but unable to lock
      		if HErrorLock() then
      			continue
      		else
      			// Other error
      			result ""
      		end
      	end
      end
      
      // Reads the sequence number, increments it and updates the file
      nSequenceNum is int = OrderNum.Number + 1
      OrderNum.Number++
      if HModify(OrderNum) = False then
      	result ""
      end
      
      // Generates the OF number
      sOrderNum is string = "OF01-"+dDate+NumToString(nSequenceNum,"08d")
      
      // Creates the order record
      HReset(Orders)
      Orders.OrderNum = sOrderNum
      Orders.InvoiceNum = Null
      Orders.InvoicingAddressID = Null
      Orders.DeliveryAddressID = Null
      Orders.OrderDate = dDate
      Orders.OrderStatus = ORD_WAITINGFORPAYMENT
      if HAdd(Orders)=False then
      	// The addition failed
      	sOrderNum = ""
      end
      
      result sOrderNum
      
      end:
      // In all cases, unlock the counter of numbers
      HUnlockRecNum(OrderNum,hRecNumCurrent)
     type : 458752
   -
     name : CurrencyToString
     procedure_id : 1629386639370664797
     type_code : 15
     code : |1+
      // Summary: Format a currency for the display
      // Syntax:
      //[ <Result> = ] CurrencyToString (<cuValue> is currency)
      //
      // Parameters:
      //	cyValue (currency): Currency to format
      // Return value:
      // 	ANSI string: Currency formatted for the display to the user
      
      Procédure CurrencyToString( local cyValue is currency)
      
      result NumToString(cyValue,maskSystemCurrency)
      
     type : 458752
   -
     name : FamilyGetSubFamilies
     procedure_id : 1630971473924541981
     type_code : 15
     code : |1+
      // Summary: Returns all the sub-families of a parent family (in a recursive way = > sub-families of sub-families)
      // Syntax:
      //[ <Result> = ] FamilyGetSubFamillies (<nParentFamilyID> is int)
      //
      // Parameters:
      //	sParentFamilyID (integer): ID of parent family
      // Return value:
      // 	array: Array of sub-families, the parent family passed in parameter is found in this array
      //
      Procédure FamilyGetSubFamilies(local sParentFamilyID is int)
      
      arrFamilies is array of int
      ArrayAdd(arrFamilies, sParentFamilyID)
      
      for each ProductFamily where ParentProductFamilyID = sParentFamilyID
      	
      	nPos is int = HSavePosition(ProductFamily)
      	arrSubFamilies is array of int = FamilyGetSubFamilies(ProductFamily.ProductFamilyID)
      	HRestorePosition(nPos)
      	ArrayAdd(arrFamilies,arrSubFamilies)
      	
      end
      
      result arrFamilies
      
     type : 458752
   -
     name : FirstLetterInUppercase
     procedure_id : 1631992568201535478
     type_code : 15
     code : |1-
      // Summary: Used to format a string with the first letter in uppercase
      // Syntax:
      //[ <Result> = ] FirstLetterInUppercase (<sString>)
      //
      // Parameters:
      //	sString: String to format
      // Return value:
      // 	Undefined type: Formatted string
      //
      Procédure FirstLetterInUppercase(sString)
      
      result Upper(sString[[1]]) + Lower(sString[[2 to]])
     type : 458752
   -
     name : CreatedInvoice
     internal_properties : CAAAAAgAAACOt38fEWjMVVoTvAoyjlHuJQrRTXm0KgmFdTil8jxVI+i55I+7qhQH1CeqIjz6DYy6R7w1PG4S1n47lWDVCNpDC33xNaYH4iKjVJDBK81wYHqm3nQWlDuSuCJ4rf1qPVtpHvli5gFgeOiT0DoI8WgWMdfdU8WhxENEKfFTmK+Gy01F3yliJIBb9Ac6grx4oWI=
     procedure_id : 1712857911959638478
     type_code : 15
     code : |1-
      // Summary: Creates a new invoice with a sequential number per day
      // Syntax:
      //[ <Result> = ] InvoiceCreate ()
      //
      // Parameters:
      //	None
      // Return value:
      // 	ANSI string: Invoice number
      
      Procédure CreatedInvoice(LOCAL dDate is date = DateSys)
      
      // The generated numbers have the following format:
      // IN01-YYYYMMDD-seqnum
      // IN01: invoice
      // YYYYMMDD: creation date of invoice
      // seqnum: sequential number of invoice
      
      // Try to position on today's record and to lock it
      while HReadSeekFirst(InvoiceNum,InvoiceDate,dDate,hLockWrite)=False
      	// If no record was found, add it
      	if HFound()=False then
      		InvoiceNum.InvoiceDate = dDate
      		InvoiceNum.Number = 0
      		HAdd(InvoiceNum)
      	else
      		// Record found but unable to lock
      		if HErrorLock() then
      			continue
      		else
      			// Other error
      			result ""
      		end
      	end
      end
      
      // Reads the sequence number, increments it and updates the file
      nSequenceNum is int = InvoiceNum.Number + 1
      InvoiceNum.Number++
      if HModify(InvoiceNum) = False then
      	result ""
      end
      
      // Generates the invoice number
      sInvoiceNum is string = "IN01-"+dDate+NumToString(nSequenceNum,"08d")
      
      // Creates the order record
      HReset(Invoice)
      Invoice.InvoiceNum = sInvoiceNum
      Invoice.OrderNum = Null
      Invoice.InvoiceDate = dDate
      if HAdd(Invoice)=False then
      	// The addition failed
      	sInvoiceNum = ""
      end
      
      result sInvoiceNum
      
      end:
      // In all cases, unlock the counter of numbers
      HUnlockRecNum(InvoiceNum,hRecNumCurrent)
     type : 458752
  procedure_templates : []
  property_templates : []
 code_parameters :
  internal_properties : CAAAAAgAAACVGQgYbalU7DKC3oH4ItDrjtcTHXXV/EuH8q0IbhyQlw==
  original_name : COL_SansNom1
resources :
 string_res :
  identifier : 0x16782f900084068d
  internal_properties : CAAAAAgAAACm76HWfKGWp33VjXInA4cRlqArlgTTA862QGt72W2ld5Y=
custom_note :
 internal_properties : CAAAAAgAAABtB9HWVzrXO2+4NDRVK0vmzaNKrCKqH1DBX30lMmGZ
